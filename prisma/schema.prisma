// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Modifier {
  warmup
}

enum WeightModifier {
  bodyweight
}

model User {
  id              String    @id
  clerkUserId     String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  workoutSessions Workout[]
}

model Exercise {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  workoutExercises WorkoutExercise[]
}

model Workout {
  id               Int               @id @default(autoincrement())
  userId           String
  name             String
  startedAt        DateTime          @default(now())
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation back to the User
  workoutExercises WorkoutExercise[]

  @@index([userId, completedAt])
  @@index([userId])
}

model WorkoutExercise {
  id               Int                  @id @default(autoincrement())
  workoutSessionId Int
  exerciseId       Int
  order            Int
  notes            String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  workout          Workout              @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  exercise         Exercise             @relation(fields: [exerciseId], references: [id], onDelete: Restrict)
  sets             WorkoutExerciseSet[]

  @@index([workoutSessionId])
  @@index([exerciseId])
}

model WorkoutExerciseSet {
  id                Int             @id @default(autoincrement())
  workoutExerciseId Int
  order             Int
  weight            Float?
  weightModifier    WeightModifier?
  reps              Int?
  modifier          Modifier?
  completed         Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@index([workoutExerciseId])
}
